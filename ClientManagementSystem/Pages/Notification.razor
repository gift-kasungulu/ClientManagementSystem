@page "/stat"
@layout LoginLayout

@using ClientManagementSystem.Data
@using ClientManagementSystem.MyContext
@inject ClientService clientService
@inject ApplicationDbContext context
@inject NavigationManager nav
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar


<MudCard Elevation="3" Class="m-4">
    <MudCardHeader>
        <CardHeaderContent>    
            <MudTooltip Text="Print Report">
                <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Print" @onclick="Print" />
            </MudTooltip>
        </CardHeaderContent>
        <CardHeaderContent>   
               <MudText Typo="Typo.h6" Color="Color.Dark">Full Report</MudText>
        </CardHeaderContent>
    </MudCardHeader>

    <MudCardContent>

    <div class="m-4">
        @if (Obj is null)
        {
            <p class="mt-3"><em>Please wait...</em></p>
        }
        else
        {
            <table class="table table-striped table-bordered mt-4">
                <thead class="thead-dark">
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Phone (+260)</th>
                        <th>Amount Given</th>
                        <th>Percentage</th>
                        <th>Payment</th>
                        <th>Date Given</th>
                        <th>Date Due</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var Clt in Obj.Where(client => Search(client)))
                    {
                        <tr>
                            <td>@Clt.FirstName</td>
                            <td>@Clt.LasstName</td>
                            <td>@Clt.Phone</td>
                            <td>@Clt.AmountGiven</td>
                            <td>@Clt.Rate</td>
                            <td>@Clt.AmmountToPay</td>
                            <td>@Clt.DateGiven</td>
                            <td>@Clt.DateDue</td> 
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
        </MudCardContent>
</MudCard>
<br />
<MudCard Elevation="3" Class="m-4">
    <MudCardHeader>
        <CardHeaderContent>
                <MudText Typo="Typo.h6" Color="Color.Dark">Report on <b>Total</b></MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
<div class="m-4">
    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Total Active Clients</th>
                <th>Total Amount Given To All Clients</th>
                <th>Total Amount To Be Paid By All Clients</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@totalClients</td>
                <td>@totalAmountGiven</td>
                <td>@totalAmountToPay</td>
            </tr>
        </tbody>
    </table>
</div>
</MudCardContent>
</MudCard>
<button class="btn btn-primary" type="button" @onclick="Print">Prints</button>
    @code {
        private string searchString = " ";
        private List<Client> Obj = new List<Client>();
        Client ClientObj = new Client();

        private bool Search(Client client)
        {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (client.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
        }

        private void GoToAdPage()
        {
        nav.NavigateTo("AddClient");
        }

        private void GoTonotifications()
        {
        nav.NavigateTo("stat");
        }

        private List<Client> clients = new List<Client>();
        private int totalClients => clients?.Count ?? 0;
        private double totalAmountGiven => clients?.Sum(c => c.AmountGiven ?? 0) ?? 0;

        private double totalAmountToPay { get; set; } = 0;


        protected override async Task OnInitializedAsync()
        {
        Obj = await Task.Run(() => clientService.GetAll());
        clients = Obj;

        // Calculate the Amount To Pay for each client
        foreach (var client in Obj)
        {
            await clientService.CalculateAmountToPay(client);
        }
        totalAmountToPay = Obj.Sum(c => c.AmmountToPay); // the total for all 
        }

        protected async Task DeleteClientRecord(Client client)
        {
        if (client != null)
        {
            await clientService.Delete(client);
            Obj = await Task.Run(() => clientService.GetAll()); // Refresh the client list after deletion
            snackBar.Add("Client Deleted", Severity.Success);
        }
        }

        private void UpdateClient(Client client)
        {
        // Navigate to the edit page, passing the client ID or necessary data
        nav.NavigateTo($"EditClient/{client.ClientId}");
        }

        private void Print()
        {
        js.InvokeVoidAsync("Print");
        }
    }
