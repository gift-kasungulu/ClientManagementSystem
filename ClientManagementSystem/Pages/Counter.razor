@page "/counter"

@using ClientManagementSystem.Data
@using ClientManagementSystem.MyContext
@inject ClientService clientService
@inject ApplicationDbContext context
@inject NavigationManager nav
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar

<PageTitle>Our Clients</PageTitle>

<MudCard Elevation="25">
    <MudCardContent>
            <MudToolBar>
            
            <div class="text-center d-flex justify-content-start mb-3">
                <div class="mx-2">
                    <MudTooltip Text="Add New Client ">
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="GoToAdPage" />
                    </MudTooltip>
                </div>

                <div class="mx-2 ">
                   
                    <MudFab StartIcon="@Icons.Material.Filled.Bookmark" Label="view Report" @onclick="GoToReport" />
                </div>

            </div>

            <div class="d-flex justify-content-end mb-3 ml-auto">
                <MudTextField @bind-Value="searchString" Label="Search" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary"></MudTextField>
            </div>

            </MudToolBar>
    </MudCardContent>
</MudCard>

<div>`
    @if (Obj is null)
    {
        <p class="mt-3"><em>Please wait...</em></p>
    }
    else
    {
        <table class="table mt-4">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Phone (+260)</th>
                    <th>Amount Given</th>
                    <th>Percentage</th>
                    <th>Payment</th>
                    <th>Date Given</th>
                    <th>Date Due</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Clt in Obj.Where(client => Search(client)))
                {
                    <tr>
                        <td>@Clt.FirstName</td>
                        <td>@Clt.LasstName</td>
                        <td>@Clt.Phone</td>
                        <td>@Clt.AmountGiven</td>
                        <td>@Clt.Rate</td>
                        <td>@Clt.AmmountToPay</td>
                        <td>@Clt.DateGiven</td>
                        <td>@Clt.DateDue</td>
                        <td>
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Edit" Size="Size.Medium" @onclick="() => UpdateClient(Clt)" />
                            <MudFab Color="Color.Secondary" Variant="" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Medium" @onclick="() => DeleteClientRecord(Clt)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@code {
    private string searchString = " ";
    private List<Client> Obj = new List<Client>();
    Client ClientObj = new Client();

    private bool Search(Client client)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (client.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void GoToAdPage()
    {
        nav.NavigateTo("AddClient");
    }


    private void GoToReport()
    {
        nav.NavigateTo("stat");
    }

    private List<Client> clients = new List<Client>();
    private int totalClients => clients?.Count ?? 0;
    private double totalAmountGiven => clients?.Sum(c => c.AmountGiven ?? 0) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        Obj = await Task.Run(() => clientService.GetAll());

        // Calculate the Amount To Pay for each client
        foreach (var client in Obj)
        {
            await clientService.CalculateAmountToPay(client);
        }
    }

    protected async Task DeleteClientRecord(Client client)
    {
        if (client != null)
        {
            await clientService.Delete(client);
            Obj = await Task.Run(() => clientService.GetAll()); // Refresh the client list after deletion
            snackBar.Add("Client Deleted", Severity.Success);
        }
    }

    private void UpdateClient(Client client)
    {
        // Navigate to the edit page, passing the client ID or necessary data
        nav.NavigateTo($"EditClient/{client.ClientId}");
    }

    private void Print()
    {
        js.InvokeVoidAsync("Print");
    }
}
