@page "/counter"

@using ClientManagementSystem.Data
@using ClientManagementSystem.MyContext
@inject ClientService clientService
@inject ApplicationDbContext context
@inject NavigationManager nav
@inject IJSRuntime JSRuntime


<PageTitle>Clients</PageTitle>

<div class="container mt-5">
    <MudText Typo="Typo.h1">Active Clients</MudText>

    @if (Obj is null)
    {
        <p class="mt-3"><em>Please wait...</em></p>
    }
    else
    {
        <table class="table table-bordered table-hover mt-4">
            <thead class="thead-dark">
                <tr>

                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Phone</th>
                    <th>Amount Given</th>
                    <th>Percentage</th>
                    <th>Payment</th>
                    <th>Date Given</th>
                    <th>Date Due</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Clt in Obj)
                {
                    <tr>

                        <td>@Clt.FirstName</td>
                        <td>@Clt.LasstName</td>
                        <td>@Clt.Phone</td>
                        <td>@Clt.AmountGiven</td>
                        <td>@Clt.Rate</td>
                        <td>@Clt.AmmountToPay</td>
                        <td>@Clt.DateGiven</td>
                        <td>@Clt.DateDue</td>
                        <td>
                            <a class="btn btn-success" href="editclient/@Clt.ClientId">
                                <span class="oi oi-book" aria-hidden="true">View Details</span>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    }
</div>

@code {
    private string SearchString = "";
    private List<Client> Obj = new List<Client>();
    Client ClientObj = new Client();

    private void GoToAdPage()
    {
        nav.NavigateTo("AddClient");
    }

    private List<Client> clients = new List<Client>();
    private int totalClients => clients?.Count ?? 0;
    private double totalAmountGiven => clients?.Sum(c => c.AmountGiven ?? 0) ?? 0;

    // protected override async Task OnInitializedAsync()
    // {
    //     Obj = await Task.Run(() => clientService.GetAll());
    // }
    protected override async Task OnInitializedAsync()
    {
        Obj = await Task.Run(() => clientService.GetAll());

        // Calculate AmountToPay for each client
        foreach (var client in Obj)
        {
            await clientService.CalculateAmountToPay(client);
        }
    }

    protected async void DeleteClientRecord()
    {
        if (ClientObj != null)
        {
            await clientService.Delete(ClientObj);
            Obj = await Task.Run(() => clientService.GetAll()); // Refresh the client list after deletion
        }
    }

    protected async void UpdateClient()
    {
        await clientService.Update(ClientObj);
        Obj = await Task.Run(() => clientService.GetAll()); // Refresh the client list after update

        // Calculate AmountToPay for the updated client
        await clientService.CalculateAmountToPay(ClientObj);
    }

    private void UpdateClient(Client client)
    {
        // Navigate to the edit page, passing the client ID or necessary data
        nav.NavigateTo($"EditClient/{client.ClientId}");
    }

    private void ShowDeleteConfirmation(Client client)
    {
        // Set the ClientObj to the client to be deleted
        ClientObj = client;

        // Show a confirmation modal or dialog here
        var confirmed = JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this client?");

        // If user confirms, proceed with deletion
        if (confirmed.Result)
        {
            DeleteClientRecord();
        }
    }
}

