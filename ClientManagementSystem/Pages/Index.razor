@page "/"

@using ClientManagementSystem.Data
@using ClientManagementSystem.MyContext
@inject ClientService clientService
@inject ApplicationDbContext context
@inject NavigationManager nav
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar

<PageTitle>Home</PageTitle>

<MudCard Elevation="3">
    <MudCardContent>
        <MudToolBar>
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div class="d-flex align-items-center">
                    <MudTooltip Text="Add New Client">
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" @onclick="GoToAdPage" />
                    </MudTooltip>
       
                    <MudFab Color="Color.Warning" StartIcon="@Icons.Material.Filled.Bookmark" Label="View Report" @onclick="GoToReport" class="ml-2" />
                </div>

            </div>
            <div class="ml-auto">
                    <MudTextField @bind-Value="searchString" Label="Search" Variant="Variant.Text" Size="Size.Small" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" Class="w-100"></MudTextField>
                </div>
        </MudToolBar>
    </MudCardContent>
</MudCard>
<br />
   <MudGrid Class="d-flex justify-content-center align-items-center">
    <MudItem xs="3">
        
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full py-8 pa-4 blue darken-1 shades-text text-white">
            <MudText Typo="Typo.h6">Total Given :</MudText>
           
            <b>
                @totalAmountGiven
            </b>
        </MudPaper>
    </MudItem>
    <MudItem xs="3">
        
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full py-8 py-8 pa-4 orange darken-1 shades-text text-white">
            <MudText Typo="Typo.h6">Total clients :</MudText>
              
            <b>
                @totalClients
            </b>
         </MudPaper>
    </MudItem>
    <MudItem xs="3">
        
        <MudPaper Elevation="3" Class="d-flex align-center justify-center mud-width-full py-8 py-8 pa-4 blue darken-1 shades-text text-white">
            <MudText Typo="Typo.h6">Total Return :</MudText>
              
            <b>
                @totalAmountToPay
            </b>
         </MudPaper>
    </MudItem>
</MudGrid>>
<div>
@if (IsLoading)
    {
        <div class="text-center mt-3">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7" />
        </div>
    }
    else
    {
        <!-- Your existing code for displaying data -->
        <table class="table mt-4">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Phone (+260)</th>
                    <th>Amount Given</th>
                    <th>Percentage</th>
                    <th>Payment</th>
                    <th>Date Given</th>
                    <th>Date Due</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var Clt in Obj.Where(client => Search(client)))
                {
                    <tr>
                        <td>@Clt.FirstName</td>
                        <td>@Clt.LasstName</td>
                        <td>@Clt.Phone</td>
                        <td>@Clt.AmountGiven</td>
                        <td>@Clt.Rate</td>
                        <td>@Clt.AmmountToPay</td>
                        <td>@Clt.DateGiven</td>
                        <td>@Clt.DateDue</td>
                        <td>
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Edit" Size="Size.Medium" @onclick="() => UpdateClient(Clt)" />
                            <MudFab Color="Color.Secondary" Variant="" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Medium" @onclick="() => DeleteClientRecord(Clt)" />
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
@code {
    private string searchString = " ";
    private List<Client> Obj = new List<Client>();
    Client ClientObj = new Client();

    private bool Search(Client client)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (client.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void GoToAdPage()
    {
        nav.NavigateTo("AddClient");
    }


    private void GoToReport()
    {
        nav.NavigateTo("stat");
    }

    private List<Client> clients = new List<Client>();
    private int totalClients => clients?.Count ?? 0;
    private double totalAmountGiven => clients?.Sum(c => c.AmountGiven ?? 0) ?? 0;
    private double totalAmountToPay { get; set; } = 0;

    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            IsLoading = true;
        Obj = await Task.Run(() => clientService.GetAll());
        clients = Obj;

        // Calculate the Amount To Pay for each client
        foreach (var client in Obj)
        {
            await clientService.CalculateAmountToPay(client);
        }
        totalAmountToPay = Obj.Sum(c => c.AmmountToPay); // the total for all 
        }
        finally
        {
            IsLoading = false;
        }

        
    }

    protected async Task DeleteClientRecord(Client client)
    {
        if (client != null)
        {
            await clientService.Delete(client);
            Obj = await Task.Run(() => clientService.GetAll()); // Refresh the client list after deletion
            snackBar.Add("Client Deleted", Severity.Success);
        }
    }

    private void UpdateClient(Client client)
    {
        // Navigate to the edit page, passing the client ID or necessary data
        nav.NavigateTo($"EditClient/{client.ClientId}");
    }

    private void Print()
    {
        js.InvokeVoidAsync("Print");
    }
}